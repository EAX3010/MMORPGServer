// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MMORPGServer.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250712205044_update3")]
    partial class update3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MMORPGServer.Database.Models.MapData", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("BgMusic")
                        .HasColumnType("int")
                        .HasColumnName("bgmusic");

                    b.Property<int>("BgMusicShow")
                        .HasColumnType("int")
                        .HasColumnName("bgmusic_show");

                    b.Property<uint>("Color")
                        .HasColumnType("int unsigned")
                        .HasColumnName("color");

                    b.Property<byte>("DelFlag")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("del_flag");

                    b.Property<string>("DescribeText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("describe_text");

                    b.Property<int>("IdxServer")
                        .HasColumnType("int")
                        .HasColumnName("idxserver");

                    b.Property<int>("LinkMap")
                        .HasColumnType("int")
                        .HasColumnName("link_map");

                    b.Property<short>("LinkX")
                        .HasColumnType("smallint")
                        .HasColumnName("link_x");

                    b.Property<short>("LinkY")
                        .HasColumnType("smallint")
                        .HasColumnName("link_y");

                    b.Property<int>("MapDoc")
                        .HasColumnType("int")
                        .HasColumnName("mapdoc");

                    b.Property<int>("MapGroup")
                        .HasColumnType("int")
                        .HasColumnName("mapgroup");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<byte>("OwnerType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("owner_type");

                    b.Property<int>("Portal0X")
                        .HasColumnType("int")
                        .HasColumnName("portal0_x");

                    b.Property<int>("Portal0Y")
                        .HasColumnType("int")
                        .HasColumnName("portal0_y");

                    b.Property<int>("RebornMap")
                        .HasColumnType("int")
                        .HasColumnName("reborn_map");

                    b.Property<int>("RebornPortal")
                        .HasColumnType("int")
                        .HasColumnName("reborn_portal");

                    b.Property<byte>("ResLev")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("res_lev");

                    b.Property<long>("Type")
                        .HasColumnType("bigint")
                        .HasColumnName("type");

                    b.Property<int>("Weather")
                        .HasColumnType("int")
                        .HasColumnName("weather");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("cq_map", (string)null);
                });

            modelBuilder.Entity("MMORPGServer.Database.Models.PlayerData", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<short>("Agility")
                        .HasColumnType("smallint");

                    b.Property<short>("Body")
                        .HasColumnType("smallint");

                    b.Property<int>("BoundConquerPoints")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("ClassLevel")
                        .HasColumnType("int");

                    b.Property<int>("ConquerPoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedAtMacAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("CreatedFingerPrint")
                        .HasColumnType("int unsigned");

                    b.Property<int>("CurrentHealth")
                        .HasColumnType("int");

                    b.Property<int>("CurrentMana")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<int>("Face")
                        .HasColumnType("int");

                    b.Property<long>("Gold")
                        .HasColumnType("bigint");

                    b.Property<int>("Hair")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastLogout")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<int>("MaxMana")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<short>("Spirit")
                        .HasColumnType("smallint");

                    b.Property<short>("Strength")
                        .HasColumnType("smallint");

                    b.Property<short>("Vitality")
                        .HasColumnType("smallint");

                    b.Property<short>("X")
                        .HasColumnType("smallint");

                    b.Property<short>("Y")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("idx_players_is_deleted");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_players_name");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("MMORPGServer.Database.Models.PointAllotData", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<short>("Agility")
                        .HasColumnType("smallint")
                        .HasColumnName("speed");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("profession");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<short>("Spirit")
                        .HasColumnType("smallint")
                        .HasColumnName("soul");

                    b.Property<short>("Strength")
                        .HasColumnType("smallint")
                        .HasColumnName("force");

                    b.Property<short>("Vitality")
                        .HasColumnType("smallint")
                        .HasColumnName("health");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("cq_point_allot", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
